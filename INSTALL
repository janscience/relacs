# For the  unpatient, run the following commands:

- for Debian based systems (using apt-get):

Make sure portaudio version 19 is installed (needed for audio monitor):
```
sudo apt-get -y remove libjack-dev libportaudio-dev libportaudio0
sudo apt-get -y install libjack-jackd2-dev libportaudio2 libportaudiocpp0 portaudio19-dev
```

install packages required by RELACS:
```
sudo apt-get -y install autoconf automake libtool libtool-bin g++ libc6-dev qtbase5-dev libgsl-dev libsndfile1-dev libcomedi-dev libusb-1.0-0-dev doxygen doxygen-latex graphviz xmlto git
```

- for Fedora based systems (using yum/dnf), login as superuser (su):

Make sure portaudio version 19 is installed (needed for audio monitor):
```
dnf -y install jack-audio-connection-kit-devel portaudio-devel
```

install packages required by RELACS:
```
dnf -y install autoconf automake libtool gcc-c++ qt5-devel gsl-devel libsndfile-devel comedilib-devel libusb-devel doxygen xmlto git
```

- after having installed the packages change into the directory of the
  RELACS source and execute:
```
sudo make uninstall
make clean
./bootstrap.sh
./configure
make -j$(grep -c "^processor" /proc/cpuinfo)
sudo make install
```

Here are the details:

# Make sure you have the following packages installed:

   autoconf
   automake
   libtool
   libtool-bin (Debian only)
   g++ (Debian) gcc-c++ (Fedora)
   libc6-dev (Debian only)
   qtbase5-dev (Debian) qt5-devel (Fedora)
   libgsl-dev (Debian) gsl-devel (Fedora)
   libsndfile1-dev (Debian) libsndfile-devel (Fedora)
   libcomedi-dev (Debian) comedilib-devel (Fedora)
   libusb-1.0-0-dev (Debian) libusb-devel (Fedora)
   doxygen
   xmlto
   git

On Debian or Ubuntu based systems execute:
```
sudo apt-get install autoconf automake libtool g++ libc6-dev qtbase5-dev libgsl-dev libsndfile1-dev libcomedi-dev libusb-1.0-0-dev doxygen xmlto git
```

On Fedora/RedHat based systems execute:
```
dnf -y install autoconf automake libtool gcc-c++ qt5-devel gsl-devel libsndfile-devel comedilib-devel libusb-devel doxygen xmlto git
```

For the audio monitor we need libportaudio version 19. 

On Ubuntu based systems you first need to remove

libjack-dev 
libportaudio-dev 
libportaudio0

and then install

libjack-jackd2-dev
libportaudio2
libportaudiocpp0
portaudio19-dev

That is, execute:
```
sudo apt-get -y remove libjack-dev libportaudio-dev libportaudio0
sudo apt-get -y install libjack-jackd2-dev libportaudio2 libportaudiocpp0 portaudio19-dev
```

On new Fedora systems you simpy need to install

jack-audio-connection-kit-devel
portaudio-devel

by executing
```
sudo apt-get -y install jack-audio-connection-kit-devel portaudio-devel
```

# Change to the directory containing the RELACS source code.
```
cd relacs-x.x.x
```

Note: if you have already installed an older version of RELACS it is best to
uninstall it first, before you install a newer version.
For this, execute the following commands from the 
root directory of the older version:
```
make uninstall
make clean
```

# Create the configure script

In case you downloaded the RELACS source code from the git
repository you need to run
```
./bootstrap.sh
```
first. On success, the ./bootstrap.sh script finishes with the
message "Successfully generated the ./configure script".


# Configure RELACS

If you want to use the comedi data acquisition interface (www.comedi.org)
for acquiring real data, then you need to install comedi first.
See www.relacs.net/plugins/comedi for more instructions.
For a demo running in simulation mode, this is not necessary.

Then run
```
./configure
```

If ./configure finishes with a message like
"If you can read these lines ./configure finished sucessfully...."
you can continue with compiling RELACS.

On failure, ./configure prints out a more or less usefull error message.
Usually ./configure fails because of some missing libraries or programs.
This means that you either
- need to install the library or program on your system, or
- specify a path where to find the library; 
  see ./configure --help and the instructions below for details.

After installation of new packages you need to run ./configure again.

See ./configure --help and the instructions below for details.


# Compile RELACS

Run
```
make -j$(grep -c "^processor" /proc/cpuinfo)
```

That takes a while! The -j options runs as many processes as you have
cpu cores in parallel.


# Check RELACS
Optionally run
```
make check
```
for executing some simple self tests.


# Run a demo

```
./relacslocal -3
```
Press for example 'F1'. More instructions on the demo will follow...


# Install RELACS 
If you want to install RELACS, simply execute
```
sudo make install
```
By default RELACS is installed to /usr . You can specify where RELACS
is installed to by the --prefix and related options during the
configure step No. 4. See ./configure --help and the instructions
below for details.


# Desktop integration
If RELACS does not use the same widget style as all your other
applications you need to run
```
qtconfig
```
and select the appropriate GUI style. Then File->Save.


# Run RELACS
Simply execute
```
relacs
```
Note, that RELACS requires the configuration files relacs.cfg and
macros.cfg in the current directory. For configuring RELACS 
see the user manual.


# Troubleshooting

In case you really cannot get ./configure to run successfully or it
fails with an error message that does not help you, then please write
me an email (jan.benda@uni-tuebingen.de, subject: RELACS) containing the full
output of ./configure and all config* files in the RELACS root
directory.

In case compilation fails, then please write me an email
(jan.benda@uni-tuebingen.de, subject: RELACS) containing the full output of
"make" (run "make &> make.log" and send the file "make.log").

In case checking fails, then please write
me an email (jan.benda@uni-tuebingen.de, subject: RELACS) containing the full
output of "make check".
syb

====================================================================
The following is a general instruction to the GNU configure script:


Installation Instructions
*************************

Copyright (C) 1994, 1995, 1996, 1999, 2000, 2001, 2002, 2004, 2005,
2006 Free Software Foundation, Inc.

This file is free documentation; the Free Software Foundation gives
unlimited permission to copy, distribute and modify it.

Basic Installation
==================

Briefly, the shell commands `./configure; make; make install' should
configure, build, and install this package.  The following
more-detailed instructions are generic; see the `README' file for
instructions specific to this package.

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, and a
file `config.log' containing compiler output (useful mainly for
debugging `configure').

   It can also use an optional file (typically called `config.cache'
and enabled with `--cache-file=config.cache' or simply `-C') that saves
the results of its tests to speed up reconfiguring.  Caching is
disabled by default to prevent problems with accidental use of stale
cache files.

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to the address given in the `README' so they can
be considered for the next release.  If you are using the cache, and at
some point `config.cache' contains results you don't want to keep, you
may remove or edit it.

   The file `configure.ac' (or `configure.in') is used to create
`configure' by a program called `autoconf'.  You need `configure.ac' if
you want to change it or regenerate `configure' using a newer version
of `autoconf'.

The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code and type
     `./configure' to configure the package for your system.

     Running `configure' might take a while.  While running, it prints
     some messages telling which features it is checking for.

  2. Type `make' to compile the package.

  3. Optionally, type `make check' to run any self-tests that come with
     the package.

  4. Type `make install' to install the programs and any data files and
     documentation.

  5. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  There is
     also a `make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.

Compilers and Options
=====================

Some systems require unusual options for compilation or linking that the
`configure' script does not know about.  Run `./configure --help' for
details on some of the pertinent environment variables.

   You can give `configure' initial values for configuration parameters
by setting variables in the command line or in the environment.  Here
is an example:

     ./configure CC=c99 CFLAGS=-g LIBS=-lposix

   *Note Defining Variables::, for more details.

Compiling For Multiple Architectures
====================================

You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you can use GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.

   With a non-GNU `make', it is safer to compile the package for one
architecture at a time in the source code directory.  After you have
installed the package for one architecture, use `make distclean' before
reconfiguring for another architecture.

Installation Names
==================

By default, `make install' installs the package's commands under
`/usr/local/bin', include files under `/usr/local/include', etc.  You
can specify an installation prefix other than `/usr/local' by giving
`configure' the option `--prefix=PREFIX'.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
pass the option `--exec-prefix=PREFIX' to `configure', the package uses
PREFIX as the prefix for installing programs and libraries.
Documentation and other data files still use the regular prefix.

   In addition, if you use an unusual directory layout you can give
options like `--bindir=DIR' to specify different values for particular
kinds of files.  Run `configure --help' for a list of the directories
you can set and what kinds of files go in them.

   If the package supports it, you can cause programs to be installed
with an extra prefix or suffix on their names by giving `configure' the
option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.

Optional Features
=================

Some packages pay attention to `--enable-FEATURE' options to
`configure', where FEATURE indicates an optional part of the package.
They may also pay attention to `--with-PACKAGE' options, where PACKAGE
is something like `gnu-as' or `x' (for the X Window System).  The
`README' should mention any `--enable-' and `--with-' options that the
package recognizes.

   For packages that use the X Window System, `configure' can usually
find the X include and library files automatically, but if it doesn't,
you can use the `configure' options `--x-includes=DIR' and
`--x-libraries=DIR' to specify their locations.

Specifying the System Type
==========================

There may be some features `configure' cannot figure out automatically,
but needs to determine by the type of machine the package will run on.
Usually, assuming the package is built to be run on the _same_
architectures, `configure' can figure that out, but if it prints a
message saying it cannot guess the machine type, give it the
`--build=TYPE' option.  TYPE can either be a short name for the system
type, such as `sun4', or a canonical name which has the form:

     CPU-COMPANY-SYSTEM

where SYSTEM can have one of these forms:

     OS KERNEL-OS

   See the file `config.sub' for the possible values of each field.  If
`config.sub' isn't included in this package, then this package doesn't
need to know the machine type.

   If you are _building_ compiler tools for cross-compiling, you should
use the option `--target=TYPE' to select the type of system they will
produce code for.

   If you want to _use_ a cross compiler, that generates code for a
platform different from the build platform, you should specify the
"host" platform (i.e., that on which the generated programs will
eventually be run) with `--host=TYPE'.

Sharing Defaults
================

If you want to set default values for `configure' scripts to share, you
can create a site shell script called `config.site' that gives default
values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.

Defining Variables
==================

Variables not defined in a site shell script can be set in the
environment passed to `configure'.  However, some packages may run
configure again during the build, and the customized values of these
variables may be lost.  In order to avoid this problem, you should set
them in the `configure' command line, using `VAR=value'.  For example:

     ./configure CC=/usr/local2/bin/gcc

causes the specified `gcc' to be used as the C compiler (unless it is
overridden in the site shell script).

Unfortunately, this technique does not work for `CONFIG_SHELL' due to
an Autoconf bug.  Until the bug is fixed you can use this workaround:

     CONFIG_SHELL=/bin/bash /bin/bash ./configure CONFIG_SHELL=/bin/bash

`configure' Invocation
======================

`configure' recognizes the following options to control how it operates.

`--help'
`-h'
     Print a summary of the options to `configure', and exit.

`--version'
`-V'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`--cache-file=FILE'
     Enable the cache: use and save the results of the tests in FILE,
     traditionally `config.cache'.  FILE defaults to `/dev/null' to
     disable caching.

`--config-cache'
`-C'
     Alias for `--cache-file=config.cache'.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.  To
     suppress all normal output, redirect it to `/dev/null' (any error
     messages will still be shown).

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`configure' also accepts some other, not widely useful, options.  Run
`configure --help' for more details.

